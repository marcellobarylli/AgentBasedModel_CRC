import requests
import json
import ast
import pandas as pd
import gseapy as gp

from tabulate import tabulate
# response = requests.get('https://www.genenetwork.nl/api/v1/genes/CXCL8, REG1A, HLA-B, SPINK4, MT2A, LYZ, CCL3, IL1B, HLA-C, IFI6, LGALS1, REG4, IFITM1, EPSTI1, TIMP1, RPS10, TFF1, CCL3L3, MT1X, IFITM2, RPS29, MT1E, RPL41, COL1A1, SOD2, IGFBP7, TYMP, COL1A2, COL3A1, IGLC7, ITLN1, TMSB10, RPL37A, IL1RN, SPP1, MX1, UBC, HLA-DRB5, RPL36A, LUM, RPS21, FTH1, LY6E, UBB, CXCL2, G0S2, SPARC, BATF, CRIP1, SAMSN1, SLC7A5, RPS28, PMAIP1, TACSTD2, BIRC3, APOE, MMP1, RPS27, POLR2L, LDHA, S100A11, TFF3, AGR2, HSP90AB1, IFI44L, IFITM3, SEC61G, NDUFA1, GLRX, S100A6, PLP2, NFKBIA, PRSS2, EMP3, RPL38, EIF2AK2, CREM, RPL37, HERC5, MIF, TFF2, RPL31, EIF4A3, RARRES2, ARID5A, IER3, IFIT1, LAP3, CXCL14, ITGB1, PRKCDBP, XAF1, RPL36, LAIR2, EIF3J, RPL17, CNP, DCN, OASL, TXN, AC090498.1, HSPE1, NDUFA13, FXYD5, SPINT2, SNRPD1, COL6A2, NBEAL1, PLA2G2A, RPL26, LMNA, MMP3, LAMB3, RAMP1, CAPZA2, RPL39, FN1, S1PR4, PRDX1, HSPG2, CYBA, FCGBP, PET100, HSPA8, MMP2, CXCL3, S100A10, S100A4, TMEM258, MAGOH, DNAJA1, GTF2B, KRTCAP2, IFI35, SERPINA1, RBX1, TSPO, CD68, RPS26, PI3, POLE3, ERH, CCL2, IRF7, RPS4Y1, CRYBB2, SLIRP, LAPTM4A, CD83, MAT2A, S100A9, HAPLN3, CD44, CCL4L2, ZC3HAV1, ROMO1, CXCR4, TIMM10, C19orf33, FXYD1, UQCR11, MUC1, PHLDA2, CMPK2, RABAC1, DDX5, S100A16, GGA2, NOP58, IRF9, NINJ1, WDR74, WTAP, OAS1, BST2, AMD1, CADM1, BEST1, IL2RA, MMP7, PMF1, LAYN, TUBB4B, BZW1, CTSA, COX7B, SLC16A1, TXNDC17, SEC62, BGN, SAP18, C15orf48, DNAJB6, CD164, PGK1, MTRNR2L8, CTSB, AC133644.2, FOXP3, MT-ND3, NEAT1, HLA-DRA, TUBA1B, SYF2, ISG15, AHSA1, ODF3B, NAMPT, CAPN2, SLC39A7, GRN, C14orf2, ATP5I, ZBTB1, MARCKSL1, AC004556.1, GNLY, CDC42SE2, PSMA2, MT-ND4L, DSTN, FXYD7, OLFM4, S100A8, SOD1, SPATS2L, COL6A1, NDUFAB1, IFIT3, FANK1, TNFAIP6, TREM1, CWC15, PAG1, ENO1, MSL2, UBE2B, COL4A2, TOMM7, ANXA5, MTHFD2, NDUFA2, ING3, VCAM1, VMO1, MT1F, PARP12, KDSR, AGR3, RP11-468E2.4, UBE2D1, RBM3, CCZ1, DOCK2, TNIP2, PFKFB3, TNFRSF18, TCEB2, FAM215B, IFI27, OAS3, HNRNPA1L2, CXCR3, SELM, FAM133B, TAGLN, UBL5, S100A14, P2RY8, SORL1, LGALS9, POSTN, TIMM22, VPS4B, SRSF3, BHLHE40, NAGK, MKRN1, NDUFC2, WFDC2, UPP1, SLC3A2, APLP2, TNFSF10, CTSK, TMA7, GNG5, C17orf49, RBM22, SEC61B, COL15A1, USP16, MMP9, CCND2, PSMC6, RP11-332H14.2, NDUFB8, PTGS2, EIF5B, NRBP1, COX6B1, KDELR2, EIF4G2, CBR3, LSR, DUS3L, FAM118A, SUGT1, NAPRT, GATA3, RPL35A, DNAJB9, BCL3, ZCCHC10, ICAM1, KRT18, ATF4, ZNF207, TNFAIP8, NDUFA3, THEM4, TRIM29, NDUFA4, CDC42EP5, C6orf62, ARL6IP1, MAP2K3, HLA-F, COL9A2, LINC00116, PARP9, PTMS, KLK10, MRPL52, LACTB, TNFRSF4, REG1B, SYNGR2, HIF1A, DYNLL1, NT5C3A, GNG11, FLOT1, IL10RB, CALD1, CDK17, ZFAS1, ANXA2, PSMD9, SREK1IP1, SNRPB2')
#
# print(response.json())
#
# for calls in response.json():
#     print(calls)
#
# # response = requests.get('https://www.genenetwork.nl/api/v1/gene-list/ENSG00000169429,ENSG00000115386,ENSG00000234745,'
# #                         'ENSG00000122711,ENSG00000125148,ENSG00000090382,ENSG00000277632,ENSG00000125538,ENSG00000204525,ENSG00000126709,ENSG00000100097,ENSG00000134193,ENSG00000185885,ENSG00000133106,ENSG00000102265,ENSG00000124614,ENSG00000160182,ENSG00000276085,ENSG00000187193,ENSG00000185201,ENSG00000213741,ENSG00000169715,ENSG00000229117,ENSG00000108821,ENSG00000112096,ENSG00000163453,ENSG00000025708,ENSG00000164692,ENSG00000168542,ENSG00000211685,ENSG00000179914,ENSG00000034510,ENSG00000197756,ENSG00000136689,ENSG00000118785,ENSG00000157601,ENSG00000150991,ENSG00000198502,ENSG00000241343,ENSG00000139329,ENSG00000171858,ENSG00000167996,ENSG00000160932,ENSG00000170315,ENSG00000081041,ENSG00000123689,ENSG00000113140,ENSG00000156127,ENSG00000213145,ENSG00000155307,ENSG00000103257,ENSG00000233927,ENSG00000141682,ENSG00000184292,ENSG00000023445,ENSG00000130203,ENSG00000196611,ENSG00000177954,ENSG00000177700,ENSG00000134333,ENSG00000163191,ENSG00000160180,ENSG00000106541,ENSG00000096384,ENSG00000137959,ENSG00000142089,ENSG00000132432,ENSG00000125356,ENSG00000173221,ENSG00000197956,ENSG00000102007,ENSG00000100906,ENSG00000275896,ENSG00000142227,ENSG00000172809,ENSG00000055332,ENSG00000095794,ENSG00000145592,ENSG00000138646,ENSG00000240972,ENSG00000160181,ENSG00000071082,ENSG00000141543,ENSG00000106538,ENSG00000196843,ENSG00000137331,ENSG00000185745,ENSG00000002549,ENSG00000145824,ENSG00000150093,ENSG00000170955,ENSG00000132530,ENSG00000130255,ENSG00000167618,ENSG00000104131,ENSG00000265681,ENSG00000173786,ENSG00000011465,ENSG00000135114,ENSG00000136810,ENSG00000279483,ENSG00000115541,ENSG00000186010,ENSG00000089327,ENSG00000167642,ENSG00000167088,ENSG00000142173,ENSG00000144426,ENSG00000188257,ENSG00000161970,ENSG00000160789,ENSG00000149968,ENSG00000196878,ENSG00000132329,ENSG00000198898,ENSG00000198918,ENSG00000115414,ENSG00000125910,ENSG00000117450,ENSG00000142798,ENSG00000051523,ENSG00000275395,ENSG00000229833,ENSG00000109971,ENSG00000087245,ENSG00000163734,ENSG00000197747,ENSG00000196154,ENSG00000134825,ENSG00000162385,ENSG00000086061,ENSG00000137947,ENSG00000163463,ENSG00000068079,ENSG00000197249,ENSG00000100387,ENSG00000100300,ENSG00000129226,ENSG00000197728,ENSG00000124102,ENSG00000148229,ENSG00000100632,ENSG00000108691,ENSG00000185507,ENSG00000129824,ENSG00000244752,ENSG00000119705,ENSG00000068697,ENSG00000112149,ENSG00000168906,ENSG00000163220,ENSG00000140511,ENSG00000026508,ENSG00000276070,ENSG00000105939,ENSG00000125995,ENSG00000121966,ENSG00000134809,ENSG00000167644,ENSG00000266964,ENSG00000127540,ENSG00000185499,ENSG00000181649,ENSG00000134326,ENSG00000105404,ENSG00000108654,ENSG00000188643,ENSG00000103365,ENSG00000055044,ENSG00000213928,ENSG00000131669,ENSG00000133316,ENSG00000146457,ENSG00000089127,ENSG00000130303,ENSG00000123505,ENSG00000182985,ENSG00000167995,ENSG00000134460,ENSG00000137673,ENSG00000160783,ENSG00000204381,ENSG00000188229,ENSG00000082153,ENSG00000064601,ENSG00000131174,ENSG00000155380,ENSG00000129235,ENSG00000008952,ENSG00000182492,ENSG00000150459,ENSG00000166920,ENSG00000105993,ENSG00000135535,ENSG00000102144,ENSG00000255823,ENSG00000164733,ENSG00000280721,ENSG00000049768,ENSG00000198840,ENSG00000245532,ENSG00000204287,ENSG00000123416,ENSG00000117614,ENSG00000187608,ENSG00000100591,ENSG00000177989,ENSG00000105835,ENSG00000162909,ENSG00000112473,ENSG00000030582,ENSG00000156411,ENSG00000169020,ENSG00000126804,ENSG00000175130,ENSG00000115523,ENSG00000158985,ENSG00000106588,ENSG00000212907,ENSG00000125868,ENSG00000221946,ENSG00000102837,ENSG00000143546,ENSG00000142168,ENSG00000196141,ENSG00000142156,ENSG00000004779,ENSG00000119917,ENSG00000203780,ENSG00000123610,ENSG00000124731,ENSG00000150316,ENSG00000076641,ENSG00000074800,ENSG00000174579,ENSG00000119048,ENSG00000134871,ENSG00000196683,ENSG00000164111,ENSG00000065911,ENSG00000131495,ENSG00000071243,ENSG00000162692,ENSG00000182853,ENSG00000198417,ENSG00000059378,ENSG00000119537,ENSG00000173467,ENSG00000259529,ENSG00000072401,ENSG00000102317,ENSG00000122674,ENSG00000134516,ENSG00000168884,ENSG00000170525,ENSG00000186891,ENSG00000103363,ENSG00000232300,ENSG00000165949,ENSG00000111331,ENSG00000139675,ENSG00000186810,ENSG00000198832,ENSG00000234545,ENSG00000149591,ENSG00000198258,ENSG00000189334,ENSG00000182162,ENSG00000137642,ENSG00000168961,ENSG00000133110,ENSG00000177370,ENSG00000119541,ENSG00000112081,ENSG00000134107,ENSG00000124357,ENSG00000133606,ENSG00000151366,ENSG00000101443,ENSG00000183696,ENSG00000168003,ENSG00000084234,ENSG00000121858,ENSG00000143387,ENSG00000232112,ENSG00000174021,ENSG00000258315,ENSG00000086589,ENSG00000106803,ENSG00000204291,ENSG00000156256,ENSG00000100985,ENSG00000118971,ENSG00000100519,ENSG00000272994,ENSG00000166136,ENSG00000073756,ENSG00000158417,ENSG00000115216,ENSG00000126267,ENSG00000136240,ENSG00000110321,ENSG00000159231,ENSG00000105699,ENSG00000141994,ENSG00000100376,ENSG00000165416,ENSG00000147813,ENSG00000107485,ENSG00000182899,ENSG00000128590,ENSG00000069399,ENSG00000155329,ENSG00000090339,ENSG00000111057,ENSG00000128272,ENSG00000010244,ENSG00000145779,ENSG00000170906,ENSG00000159445,ENSG00000137699,ENSG00000189043,ENSG00000167617,ENSG00000112308,ENSG00000170540,ENSG00000034152,ENSG00000204642,ENSG00000049089,ENSG00000175701,ENSG00000138496,ENSG00000159335,ENSG00000129451,ENSG00000172590,ENSG00000103642,ENSG00000186827,ENSG00000172023,ENSG00000108639,ENSG00000100644,ENSG00000088986,ENSG00000122643,ENSG00000127920,ENSG00000137312,ENSG00000243646,ENSG00000122786,ENSG00000059758,ENSG00000177410,ENSG00000182718,ENSG00000110801,ENSG00000153006,ENSG00000125870')
#
# response = requests.get('https://www.genenetwork.nl/network/ENSG00000169429,ENSG00000115386,ENSG00000234745,ENSG00000122711,ENSG00000125148,ENSG00000090382,ENSG00000277632,ENSG00000125538,ENSG00000204525,ENSG00000126709,ENSG00000100097,ENSG00000134193,ENSG00000185885,ENSG00000133106,ENSG00000102265,ENSG00000124614,ENSG00000160182,ENSG00000276085,ENSG00000187193,ENSG00000185201,ENSG00000213741,ENSG00000169715,ENSG00000229117,ENSG00000108821,ENSG00000112096,ENSG00000163453,ENSG00000025708,ENSG00000164692,ENSG00000168542,ENSG00000211685,ENSG00000179914,ENSG00000034510,ENSG00000197756,ENSG00000136689,ENSG00000118785,ENSG00000157601,ENSG00000150991,ENSG00000198502,ENSG00000241343,ENSG00000139329,ENSG00000171858,ENSG00000167996,ENSG00000160932,ENSG00000170315,ENSG00000081041,ENSG00000123689,ENSG00000113140,ENSG00000156127,ENSG00000213145,ENSG00000155307,ENSG00000103257,ENSG00000233927,ENSG00000141682,ENSG00000184292,ENSG00000023445,ENSG00000130203,ENSG00000196611,ENSG00000177954,ENSG00000177700,ENSG00000134333,ENSG00000163191,ENSG00000160180,ENSG00000106541,ENSG00000096384,ENSG00000137959,ENSG00000142089,ENSG00000132432,ENSG00000125356,ENSG00000173221,ENSG00000197956,ENSG00000102007,ENSG00000100906,ENSG00000275896,ENSG00000142227,ENSG00000172809,ENSG00000055332,ENSG00000095794,ENSG00000145592,ENSG00000138646,ENSG00000240972,ENSG00000160181,ENSG00000071082,ENSG00000141543,ENSG00000106538,ENSG00000196843,ENSG00000137331,ENSG00000185745,ENSG00000002549,ENSG00000145824,ENSG00000150093,ENSG00000170955,ENSG00000132530,ENSG00000130255,ENSG00000167618,ENSG00000104131,ENSG00000265681,ENSG00000173786,ENSG00000011465,ENSG00000135114,ENSG00000136810,ENSG00000279483,ENSG00000115541,ENSG00000186010,ENSG00000089327,ENSG00000167642,ENSG00000167088,ENSG00000142173,ENSG00000144426,ENSG00000188257,ENSG00000161970,ENSG00000160789,ENSG00000149968,ENSG00000196878,ENSG00000132329,ENSG00000198898,ENSG00000198918,ENSG00000115414,ENSG00000125910,ENSG00000117450,ENSG00000142798,ENSG00000051523,ENSG00000275395,ENSG00000229833,ENSG00000109971,ENSG00000087245,ENSG00000163734,ENSG00000197747,ENSG00000196154,ENSG00000134825,ENSG00000162385,ENSG00000086061,ENSG00000137947,ENSG00000163463,ENSG00000068079,ENSG00000197249,ENSG00000100387,ENSG00000100300,ENSG00000129226,ENSG00000197728,ENSG00000124102,ENSG00000148229,ENSG00000100632,ENSG00000108691,ENSG00000185507,ENSG00000129824,ENSG00000244752,ENSG00000119705,ENSG00000068697,ENSG00000112149,ENSG00000168906,ENSG00000163220,ENSG00000140511,ENSG00000026508,ENSG00000276070,ENSG00000105939,ENSG00000125995,ENSG00000121966,ENSG00000134809,ENSG00000167644,ENSG00000266964,ENSG00000127540,ENSG00000185499,ENSG00000181649,ENSG00000134326,ENSG00000105404,ENSG00000108654,ENSG00000188643,ENSG00000103365,ENSG00000055044,ENSG00000213928,ENSG00000131669,ENSG00000133316,ENSG00000146457,ENSG00000089127,ENSG00000130303,ENSG00000123505,ENSG00000182985,ENSG00000167995,ENSG00000134460,ENSG00000137673,ENSG00000160783,ENSG00000204381,ENSG00000188229,ENSG00000082153,ENSG00000064601,ENSG00000131174,ENSG00000155380,ENSG00000129235,ENSG00000008952,ENSG00000182492,ENSG00000150459,ENSG00000166920,ENSG00000105993,ENSG00000135535,ENSG00000102144,ENSG00000255823,ENSG00000164733,ENSG00000280721,ENSG00000049768,ENSG00000198840,ENSG00000245532,ENSG00000204287,ENSG00000123416,ENSG00000117614,ENSG00000187608,ENSG00000100591,ENSG00000177989,ENSG00000105835,ENSG00000162909,ENSG00000112473,ENSG00000030582,ENSG00000156411,ENSG00000169020,ENSG00000126804,ENSG00000175130,ENSG00000115523,ENSG00000158985,ENSG00000106588,ENSG00000212907,ENSG00000125868,ENSG00000221946,ENSG00000102837,ENSG00000143546,ENSG00000142168,ENSG00000196141,ENSG00000142156,ENSG00000004779,ENSG00000119917,ENSG00000203780,ENSG00000123610,ENSG00000124731,ENSG00000150316,ENSG00000076641,ENSG00000074800,ENSG00000174579,ENSG00000119048,ENSG00000134871,ENSG00000196683,ENSG00000164111,ENSG00000065911,ENSG00000131495,ENSG00000071243,ENSG00000162692,ENSG00000182853,ENSG00000198417,ENSG00000059378,ENSG00000119537,ENSG00000173467,ENSG00000259529,ENSG00000072401,ENSG00000102317,ENSG00000122674,ENSG00000134516,ENSG00000168884,ENSG00000170525,ENSG00000186891,ENSG00000103363,ENSG00000232300,ENSG00000165949,ENSG00000111331,ENSG00000139675,ENSG00000186810,ENSG00000198832,ENSG00000234545,ENSG00000149591,ENSG00000198258,ENSG00000189334,ENSG00000182162,ENSG00000137642,ENSG00000168961,ENSG00000133110,ENSG00000177370,ENSG00000119541,ENSG00000112081,ENSG00000134107,ENSG00000124357,ENSG00000133606,ENSG00000151366,ENSG00000101443,ENSG00000183696,ENSG00000168003,ENSG00000084234,ENSG00000121858,ENSG00000143387,ENSG00000232112,ENSG00000174021,ENSG00000258315,ENSG00000086589,ENSG00000106803,ENSG00000204291,ENSG00000156256,ENSG00000100985,ENSG00000118971,ENSG00000100519,ENSG00000272994,ENSG00000166136,ENSG00000073756,ENSG00000158417,ENSG00000115216,ENSG00000126267,ENSG00000136240,ENSG00000110321,ENSG00000159231,ENSG00000105699,ENSG00000141994,ENSG00000100376,ENSG00000165416,ENSG00000147813,ENSG00000107485,ENSG00000182899,ENSG00000128590,ENSG00000069399,ENSG00000155329,ENSG00000090339,ENSG00000111057,ENSG00000128272,ENSG00000010244,ENSG00000145779,ENSG00000170906,ENSG00000159445,ENSG00000137699,ENSG00000189043,ENSG00000167617,ENSG00000112308,ENSG00000170540,ENSG00000034152,ENSG00000204642,ENSG00000049089,ENSG00000175701,ENSG00000138496,ENSG00000159335,ENSG00000129451,ENSG00000172590,ENSG00000103642,ENSG00000186827,ENSG00000172023,ENSG00000108639,ENSG00000100644,ENSG00000088986,ENSG00000122643,ENSG00000127920,ENSG00000137312,ENSG00000243646,ENSG00000122786,ENSG00000059758,ENSG00000177410,ENSG00000182718,ENSG00000110801,ENSG00000153006,ENSG00000125870')
# print('Response from own api url: ', response.text)
# print(response.json())
#
# for calls in response.json():
#     print(calls)

def format_diff_exp_genes_for_genenetwork_nl(side, p_cutoff, cell_type_to_look_at, tissue_class, scale):
    with open('../results/diff_exp_genes_sign_{}_{}_{}_{}.txt'.format(side, p_cutoff, cell_type_to_look_at,
                                                                      tissue_class, scale)) as \
            json_file:
        data = json.load(json_file)

        print('The number of genes in the CMS1 list: ', len(data['CMS1'][0:499]))
        print('The number of genes in the CMS2 list: ', len(data['CMS2'][0:499]))
        print('The number of genes in the CMS3 list: ', len(data['CMS3'][0:499]))
        print('The number of genes in the CMS4 list: ', len(data['CMS4'][0:499]))

        print('CMS1: [%s]' % ', '.join(map(str, data['CMS1'][0:499])))
        print('CMS2: [%s]' % ', '.join(map(str, data['CMS2'][0:499])))
        print('CMS3: [%s]' % ', '.join(map(str, data['CMS3'][0:499])))
        print('CMS4: [%s]' % ', '.join(map(str, data['CMS4'][0:499])))

        f = open('../results/clustering_gene_network/genenetwork_cluster_cms1_{}_{}_{}_{}_{}.txt'.format(side, p_cutoff,
                                                                                                         cell_type_to_look_at,
                                                                                                         tissue_class,
                                                                                                         scale), "w+")
        f.close()

        f = open('../results/clustering_gene_network/genenetwork_cluster_cms2_{}_{}_{}_{}_{}.txt'.format(side, p_cutoff,
                                                                                                         cell_type_to_look_at,
                                                                                                         tissue_class,
                                                                                                         scale), "w+")
        f.close()

        f = open('../results/clustering_gene_network/genenetwork_cluster_cms3_{}_{}_{}_{}_{}.txt'.format(side, p_cutoff,
                                                                                                         cell_type_to_look_at,
                                                                                                         tissue_class,
                                                                                                         scale), "w+")
        f.close()

        f = open('../results/clustering_gene_network/genenetwork_cluster_cms4_{}_{}_{}_{}_{}.txt'.format(side, p_cutoff,
                                                                                                         cell_type_to_look_at,
                                                                                                         tissue_class,
                                                                                                         scale), "w+")
        f.close()


def load_clusters(side, p_cutoff, cell_type_to_look_at, tissue_class, scale):
    cms1 = pd.read_csv('../results/clustering_gene_network/genenetwork_cluster_cms1_{}_{}_{}_{}_{}.txt'.format(side,
                                                                                                               p_cutoff,
                                                                                                         cell_type_to_look_at,
                                                                                                         tissue_class,
                                                                                                         scale),
                       skiprows = 7, delimiter='\t')
    cms2 = pd.read_csv('../results/clustering_gene_network/genenetwork_cluster_cms2_{}_{}_{}_{}_{}.txt'.format(side,
                                                                                                               p_cutoff,
                                                                                                         cell_type_to_look_at,
                                                                                                         tissue_class,
                                                                                                         scale),
                       skiprows = 7, delimiter='\t')
    cms3 = pd.read_csv('../results/clustering_gene_network/genenetwork_cluster_cms3_{}_{}_{}_{}_{}.txt'.format(side,
                                                                                                               p_cutoff,
                                                                                                         cell_type_to_look_at,
                                                                                                         tissue_class,
                                                                                                         scale),
                       skiprows = 7, delimiter='\t')
    cms4 = pd.read_csv('../results/clustering_gene_network/genenetwork_cluster_cms4_{}_{}_{}_{}_{}.txt'.format(side,
                                                                                                               p_cutoff,
                                                                                                         cell_type_to_look_at,
                                                                                                         tissue_class,
                                                                                                         scale),
                       skiprows = 7, delimiter='\t')

    # print(cms1)
    # print(cms2)
    # print(cms3)
    # print(cms4)

    for subtype, cms_list in zip(['CMS1', 'CMS2', 'CMS3', 'CMS4'], [cms1, cms2, cms3, cms4]):
        print(cms_list['cluster'])
        cms_list['cluster'] = cms_list['cluster'].apply(lambda x: int(x.replace('Cluster ', '')))
        cms_list.sort_values(by='cluster', inplace=True)
        for cluster_name, cluster in cms_list.groupby(by='cluster'):

            genes = list(cluster['gene_name'].values)
            enr = gp.enrichr(gene_list=genes,
                             gene_sets=['MSigDB_Hallmark_2020',
                                        'KEGG_2019_Human',
                                        'GO_Biological_Process_2018',
                                        'GO_Cellular_Component_2018',
                                        'Human_Phenotype_Ontology',
                                        'MSigDB_Oncogenic_Signatures'
                                        ],
                             organism='Human',  # don't forget to set organism to the one you desired! e.g. Yeast
                             description='test_name',
                             outdir='../results/clustering_gene_network/gn_cluster_path/{}/{}/enrichr'.format(subtype,
                                                                                          cell_type_to_look_at),
                             no_plot=True
                             )

            results_sum = pd.DataFrame(columns=['Gene_set', 'Term', 'Overlap', 'P-value'])
            for geneset, geneset_results in enr.results.groupby(by='Gene_set'):
                if len(geneset_results.loc[geneset_results['Adjusted P-value'] < 10**(-5)][['Gene_set', 'Term',
                                                                                          'Overlap', 'P-value']]) != 0:
                    print('Results for cluster {}, {} of type {}'.format(cluster_name, cell_type_to_look_at, subtype))
                    print('The cluster size is: ', len(genes))
                    # print(tabulate(geneset_results.loc[geneset_results['P-value'] < 10**(-5)][['Gene_set', 'Term',
                    #                                                                             'Overlap',
                    #                                                                             'P-value']].head(5),
                    #                headers='keys',
                    #                tablefmt='csv'))
                    
                    results_sum = pd.concat([results_sum, geneset_results.loc[geneset_results['P-value'] < 10**(-5)][['Gene_set', 'Term',
                                                                                                'Overlap',
                                                                                                'P-value']].head(5)],
                                            ignore_index=True)

            print(tabulate(results_sum,
                           headers='keys',
                           tablefmt='csv'))


cell_types = ['T cells', 'B cells', 'Myeloids', 'Stromal cells', 'Epithelial cells']
cell_type_to_look_at = 'Stromal cells'
side = 'neg'
p_cutoff = '0025'
tissue_class = 'Tumor'
scale = 'raw'

# format_diff_exp_genes_for_genenetwork_nl(side, p_cutoff, cell_type_to_look_at, tissue_class, scale)

load_clusters(side, p_cutoff, cell_type_to_look_at, tissue_class, scale)